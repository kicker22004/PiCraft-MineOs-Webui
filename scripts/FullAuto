#!/bin/bash

yellow='\e[1;33m'
green='\e[1;32m'
red='\e[0;31m'
white='\e[1;37m'
log='logger.txt'


#Caution
echo -e "${red}"
while true;do
    read -p "This will install and remove the desktop. Continue? (yes or no)" yn
    case $yn in
	 [Yy]* ) echo "Starting Script"; break;;
	 [Nn]* ) echo "Please Rerun script.";tput sgr0; exit;;
	 * ) echo "Please answer yes or no."; exit;;
 esac
done
clear

echo -e "${green} Welcome to the Auto w/o gui script!"
sleep 2
echo "We will need just one peice of information from you then we can continue."
sleep 1
echo "This will take about 10 minutes to complete (depending on your ISP) and will reboot you to cli."
sleep 3

#Ask about noip2.
echo -e "${yellow}"
cd /usr/local/src
while true; do
    read -p "Would you like to Install noip2? (yes or no)" yn
    case $yn in
	 [Yy]* ) tput sgr0; wget http://www.no-ip.com/client/linux/noip-duc-linux.tar.gz; tar xf noip-duc-linux.tar.gz; cd noip-2.1.9-1/; make install; echo "Yes";echo -e "${green} The rest will be Automatic so sit back and enjoy!"; break;;
	 [Nn]* ) echo "No"; echo -e "${green} The rest will be Automatic so sit back and enjoy!"; break;;
	 * ) echo "Please answer yes or no.";;
 esac
done
rm /usr/local/src/noip-duc-linux.tar.gz &> "${log}"

#Install dependencies
echo -e "${yellow}Updating and getting prerequisites"
echo -e "${green} 10%"
{
 apt-get update
 apt-get -y install tar screen python-cherrypy3 rdiff-backup
} &> "${log}"

echo -e "${yellow}Downloading/Installing Optimized Java, Please Wait..."
wget --no-check-certificate http://www.java.net/download/jdk8/archive/b121/binaries/jdk-8-ea-b121-linux-arm-vfp-hflt-19_dec_2013.tar.gz
echo -e "${green} 20%" 
{
 tar zxvf jdk* -C /opt
 rm jdk-8-ea-b121-linux-arm-vfp-hflt-19_dec_2013.tar.gz
 update-alternatives --install "/usr/bin/java" "java" "/opt/jdk1.8.0/bin/java" 1
 update-alternatives --install "/usr/bin/javac" "javac" "/opt/jdk1.8.0/bin/javac" 1
 update-alternatives --set java /opt/jdk1.8.0/bin/java
 update-alternatives --set javac /opt/jdk1.8.0/bin/javac
 . /etc/profile
} &> "${log}"
echo -e "${green} 30%"

#Install MineOs Scripts and services.
echo -e "${yellow}Install MineOS scripts and service"
{
 mkdir -p /usr/games
 cd /usr/games
 git clone --depth 1 https://github.com/hexparrot/mineos minecraft
 cd minecraft
 git config core.filemode false
 chmod +x server.py mineos_console.py generate-sslcert.sh
 cp /usr/games/minecraft/init/mineos /etc/init.d/
 chmod 755 /etc/init.d/mineos
 update-rc.d mineos defaults
} &> "${log}"
echo -e "${green} 45%"

#Start MineOs on boot
echo -e "${yellow}Start MineOs on boot"
{
 cp /usr/games/minecraft/init/minecraft /etc/init.d/
 chmod 744 /etc/init.d/minecraft
 update-rc.d mineos defaults
} &> "${log}"
echo -e "${green} 55%"

#Copy the default mineos.conf
cp /usr/games/minecraft/mineos.conf /etc/ &> "${log}"

# Make SSL Cert
echo -e "${yellow}Generate SSL cert for web UI of MineOS"
cd /usr/games/minecraft
./generate-sslcert.sh

#Start Mineos service
echo -e "${yellow}Starting the MineOS service"
service mineos start

#Creating Default Mineos User
echo -e "${green} Adding user (boxcraft) and password (12345)"
echo -e "${green} 70%"
{
 useradd boxcraft
 echo "boxcraft:12345" | chpasswd
} &> "${log}"
echo -e "${green} 75%"
#Removing x11-common
echo -e "${yellow} Removing x11-common"
apt-get remove --purge x11-common -y &> "${log}"
echo -e "${green} 80%"

echo -e "${green} 90%"

echo -e "${yellow}Cleaning up.."
sleep 2
echo -e "${green}ALL DONE, THANK THE DEV'S FOR THEIR TIME AND ENERGY!."
sleep 2
echo -e "${green} 100%"
#Rebooting
echo "Rebooting System in 5 seconds"
echo "Enjoy Your New Cubox-i4pro Server with an amazing WebUI!." 
sleep 5
{
 cd $HOME
rm -rf temp
} &> "${log}"
reboot
exit 0
